package config

import (
	`encoding/json`
	`errors`
)

/*
	Created by aomerk at 5/20/21 for project strixeye
*/

/*
	Here we keep the necessary configuration of our cli.
*/

// global constants for file
const ()

// global variables (not cool) for this file
var ()

// Cli keeps needed information to run strixeye cli.
// It's usually kept under the same folder with strixeyed config file if there is one.
//
// It's usually kept in json format.
type Cli struct {
	
	// userAPIToken is used for the authentication process to Strixeye User API.
	// This api is open to all our customers and feel free to check out the documentation.
	//
	// userAPIToken is generally sent as Authentication Bearer token over https.
	userAPIToken string
	
	// strixeye cli is usually designed to be used for a single agent instance at once,
	// while not necessary, this field can be use to save user preference.
	//
	// However, most functions are agent id dependent.
	currentAgentId string
}

// Validate checks for bad/empty input inside config instances. Ids and Tokens are mostly generated by uuids.
func (c *Cli) Validate() error {
	// TODO add validation support
	if c.userAPIToken == "" || c.currentAgentId == "" {
		return errors.New("has empty field")
	}
	return nil
}

// Cli counterpart.
type cliJSON struct {
	UserAPIToken   string `json:"user_api_token"`
	CurrentAgentId string `json:"current_agent_id"`
}

// UnmarshalJSON
func (c *Cli) UnmarshalJSON(bytes []byte) error {
	var (
		tmpCli cliJSON
		err    error
	)
	
	err = json.Unmarshal(bytes, &tmpCli)
	if err != nil {
		return err
	}
	
	c.currentAgentId = tmpCli.UserAPIToken
	c.userAPIToken = tmpCli.UserAPIToken
	
	return nil
}

// MarshalJSON
func (c *Cli) MarshalJSON() ([]byte, error) {
	return json.Marshal(
		cliJSON{
			UserAPIToken:   c.userAPIToken,
			CurrentAgentId: c.currentAgentId,
		},
	)
}

func (c *Cli) CurrentAgentId() string {
	return c.currentAgentId
}

func (c *Cli) SetCurrentAgentId(currentAgentId string) {
	c.currentAgentId = currentAgentId
}

func (c *Cli) UserAPIToken() string {
	return c.userAPIToken
}

func (c *Cli) SetUserAPIToken(userAPIToken string) {
	c.userAPIToken = userAPIToken
}
